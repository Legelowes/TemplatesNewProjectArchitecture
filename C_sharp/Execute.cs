//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Execute : Script File.cs
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
namespace FLORENCE_DevelopersTemplete
{
    public class Execute
    {
//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	CONSTRUCTOR ******************************************************************************************************************************************
// 	******************************************************************************************************************************************************
        public Execute(int num_implemented_cores)
        {
        // TIER CHARLIE (Top - 2) :: Control/Execute
            this.control_Execute = new FLORENCE_DevelopersTemplete.Control_Execute(num_implemented_cores);
            while(this.control_Execute == null) { } //wait.
            System.Console.WriteLine(">> >> >> Object CREATED : Dynamic_XxxxxxXxxxxx/control_Execute");//SIMULATION
        }
        ~Execute()
        {

        }
  
//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
        public void thread_Concurrency(Dynamic_XxxxxxXxxxxx obj, int coreId)
        {
            System.Console.WriteLine(">> >> >> Thread STARTED : Dynamic_XxxxxxXxxxxx/Execute/thread_Concurrency");//SIMULATION
            obj.getInstance_Control_Execute().setConditionCodeOfThisThreadedCore(coreId);
            while(obj.getInstance_Control_Execute().getFlag_ThreadInitialised(coreId) != false) {/* wait untill thread initalised */}
            while(obj.getInstance_Control_Execute().getFlag_ThreadInitialised(coreId) == false) 
            {
                // TODO>
            }
        }
        public void thread_IO_ListenDistribute(Dynamic_XxxxxxXxxxxx obj, int coreId)
        {
            System.Console.WriteLine(">> >> >> Thread STARTED : Dynamic_XxxxxxXxxxxx/Execute/thread_IO_ListenDistribute");//SIMULATION
            obj.getInstance_Control_Execute().setConditionCodeOfThisThreadedCore(coreId);
            while(obj.getInstance_Control_Execute().getFlag_ThreadInitialised(coreId) != false) {/* wait untill thread initalised */}

            System.Console.WriteLine("DEFINTITION of Static Script COMPLETE");//SIMULATION            
            System.Console.WriteLine("INITALISATION of Static Instances COMPLETE");//SIMULATION
            System.Console.WriteLine("DECLARATION of Dynamic Architecture COMPLETE");//SIMULATION
            System.Console.WriteLine("INSTANCIATION of Dynamic Architecture COMPLETE");//SIMULATION
            System.Console.WriteLine("LAUNCH of CONCURRENT Dynamic Architecture COMPLETE");//SIMULATION

            System.Console.WriteLine("        ,     \\      /      ,");//SIMULATION
            System.Console.WriteLine("       / \\    )\\ __ /(     / \\ ");//SIMULATION
            System.Console.WriteLine("      /   \\   (_\\  /_)    /   \\ ");//SIMULATION
            System.Console.WriteLine("____ / ____\\__ \\@  @/ ___/_____\\_____");//SIMULATION
            System.Console.WriteLine("|              |\\../|               |");//SIMULATION
            System.Console.WriteLine("|               \\VV/                |");//SIMULATION
            System.Console.WriteLine("|             FLORANCE              |");//SIMULATION
            System.Console.WriteLine("|        DEVELOPERS TEMPLATE        |");//SIMULATION
            System.Console.WriteLine("|___________________________________|");//SIMULATION
            System.Console.WriteLine("|    / \\ /        \\\\        \\ /\\    |");//SIMULATION
            System.Console.WriteLine("|  /    V          ))        V   \\  |");//SIMULATION
            System.Console.WriteLine("|/                //               \\| ");//SIMULATION
            System.Console.WriteLine("`                 V                 '");//SIMULATION

            while(obj.getInstance_Control_Execute().getFlag_ThreadInitialised(coreId) == false) 
            {
                // TODO>
            }
        }

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
        // TIER CHARLIE (Top - 2) :: Control/Execute
            public Control_Execute getInstance_Control_Execute()
            {
                return this.control_Execute;
            }


//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
        // TIER CHARLIE (Top - 2) :: Dynamic_XxxxxxXxxxxx/Control/Execute
    private Control_Execute control_Execute;

//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------

        
    }
}
//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<