//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Terminal Wrapper : Script File.cs
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
namespace FLORENCE_NameSpace
{
    static class Static_XXXXXX
    {
//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
		public void initialise_StaticFramework_XxxXxx()
		{
// INSTANCE(S)
	// TIER BRAVO (Top - 1) :: Execute	
            this.static_Execute = new FLORENCE_NameSpace.Execute();
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Control
    		this.static_Control = new FLORENCE_NameSpace.Control();
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Algorithms	
            this.static_Algorithms = new FLORENCE_NameSpace.Algorithms();
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Data
            this.static_Data = new FLORENCE_NameSpace.Data();
        // TIER CHARLIE (Top - 2) :: Data/Input
            this.static_Data_Input = new FLORENCE_NameSpace.Data_Input();
        // TIER CHARLIE (Top - 2) :: Data/Ouput
			this.static_Data_Output = new FLORENCE_NameSpace.Data_Output();
        // TIER CHARLIE (Top - 2) :: Data/Reconnaissance
            this.static_Data_Reconnaissance = new FLORENCE_NameSpace.Data_Reconnaissance();
    // TIER BRAVO (Top - 1) :: Wrapper
            this.static_Wrapper = new FLORENCE_NameSpace.TerminanlWrapper();
        // TIER CHARLIE (Top - 2) :: Wrapper/???
            /* TODO>
            *
            */
        }
//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
// INSTANCE(S)
	// TIER BRAVO (Top - 1) :: Execute	
        private Execute static_Execute;
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Control
    	private Control static_Control;
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Algorithms	
        private Algorithms static_Algorithms;
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Data
        private Data static_Data;
        // TIER CHARLIE (Top - 2) :: Data/Input
            private Data_Input static_Data_Input;
        // TIER CHARLIE (Top - 2) :: Data/Ouput
		    private Data_Output static_Data_Output;
        // TIER CHARLIE (Top - 2) :: Data/Reconnaissance
            private Data_Reconnaissance static_Data_Reconnaissance;
    // TIER BRAVO (Top - 1) :: Wrapper
        private TerminalWrapper static_Wrapper;
        // TIER CHARLIE (Top - 2) :: Wrapper/???
            /* TODO>
            *
            */

//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// INSTANCE(S)
	// TIER BRAVO (Top - 1) :: Execute	
		private Execute getStatic_Execute()
		{
			return this.static_Execute;
		}
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Control
    	private Control getStatic_Control()
		{
			return this.static_Control;
		}
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Algorithms	
        private Algorithms getStatic_Algorithms()
		{
			return this.static_Algorithms;
		}
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Data
        private Data getStatic_Data()
		{
			return this.static_Data;
		}
        // TIER CHARLIE (Top - 2) :: Data/Input
            private Data_Input getStatic_Data_Input()
		    {
			    return this.static_Data_Input;
		    }
        // TIER CHARLIE (Top - 2) :: Data/Ouput
            private Data_Output getStatic_Data_Output()
		    {
			    return this.static_Data_Output;
		    }
        // TIER CHARLIE (Top - 2) :: Data/Reconnaissance
            private Data_Reconnaissance getStatic_Data_Reconnaissance()
		    {
			    return this.static_Data_Reconnaissance;
		    }
    // TIER BRAVO (Top - 1) :: Wrapper
        private TerminalWrapper getStatic_TerminalWrapper()
		{
			return this.static_Wrapper;
		}
        // TIER CHARLIE (Top - 2) :: Wrapper/???
            /* TODO>
            *
            */
    }
    class Dynamic_XXXXXX
    {
//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

        public Dynamic_XXXXXX()
        {
// INSTANCE(S)
	// TIER BRAVO (Top - 1) :: Execute	
            this.execute = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Execute();
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Control
    	    this.control = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Control();
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Algorithms	
            this.algorithms = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Algorithms();
        // TIER CHARLIE (Top - 2) :: Execute/???
            /* TODO>
            *
            */
    // TIER BRAVO (Top - 1) :: Data
            this.data = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Data();
        // TIER CHARLIE (Top - 2) :: Data/Input
                this.data_Input = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Data_Input();
        // TIER CHARLIE (Top - 2) :: Data/Ouput
		        this.data_Output = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Data_Output();
        // TIER CHARLIE (Top - 2) :: Data/Reconnaissance
                this.data_Reconnaissance = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_Data_Reconnaissance();
    // TIER BRAVO (Top - 1) :: Wrapper
            this.terminalWrapper = new FLORENCE_NameSpace.Static_XXXXXX.getStatic_TerminalWrapper();
        // TIER CHARLIE (Top - 2) :: Wrapper/???
            /* TODO>
            *
            */
    }
//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
// INSTANCE(S)
	// TIER BRAVO (Top - 1) :: Execute	
    private Execute execute;
        // TIER CHARLIE (Top - 2) :: Execute/???
        /* TODO>
        *
        */
    // TIER BRAVO (Top - 1) :: Control
    private Control control;
        // TIER CHARLIE (Top - 2) :: Execute/???
        /* TODO>
        *
        */
    // TIER BRAVO (Top - 1) :: Algorithms	
    private Algorithms algorithms;
        // TIER CHARLIE (Top - 2) :: Execute/???
        /* TODO>
        *
        */
    // TIER BRAVO (Top - 1) :: Data
    private Data data;
        // TIER CHARLIE (Top - 2) :: Data/Input
        private Data_Input data_Input;
        // TIER CHARLIE (Top - 2) :: Data/Ouput
		 private Data_Output data_Output;
        // TIER CHARLIE (Top - 2) :: Data/Reconnaissance
        private Data_Reconnaissance data_Reconnaissance;
    // TIER BRAVO (Top - 1) :: Wrapper
     private TerminalWrapper terminanlWrapper;
        // TIER CHARLIE (Top - 2) :: Wrapper/???
        /* TODO>
        *
        */

//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------


    }
}
//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<